import { CreateAssistantDTO } from "@vapi-ai/web/dist/api";
import { z } from "zod";

export const mappings = {
  "react.js": "react",
  reactjs: "react",
  react: "react",
  "next.js": "nextjs",
  nextjs: "nextjs",
  next: "nextjs",
  "vue.js": "vuejs",
  vuejs: "vuejs",
  vue: "vuejs",
  "express.js": "express",
  expressjs: "express",
  express: "express",
  "node.js": "nodejs",
  nodejs: "nodejs",
  node: "nodejs",
  mongodb: "mongodb",
  mongo: "mongodb",
  mongoose: "mongoose",
  mysql: "mysql",
  postgresql: "postgresql",
  sqlite: "sqlite",
  firebase: "firebase",
  docker: "docker",
  kubernetes: "kubernetes",
  aws: "aws",
  azure: "azure",
  gcp: "gcp",
  digitalocean: "digitalocean",
  heroku: "heroku",
  photoshop: "photoshop",
  "adobe photoshop": "photoshop",
  html5: "html5",
  html: "html5",
  css3: "css3",
  css: "css3",
  sass: "sass",
  scss: "sass",
  less: "less",
  tailwindcss: "tailwindcss",
  tailwind: "tailwindcss",
  bootstrap: "bootstrap",
  jquery: "jquery",
  typescript: "typescript",
  ts: "typescript",
  javascript: "javascript",
  js: "javascript",
  "angular.js": "angular",
  angularjs: "angular",
  angular: "angular",
  "ember.js": "ember",
  emberjs: "ember",
  ember: "ember",
  "backbone.js": "backbone",
  backbonejs: "backbone",
  backbone: "backbone",
  nestjs: "nestjs",
  graphql: "graphql",
  "graph ql": "graphql",
  apollo: "apollo",
  webpack: "webpack",
  babel: "babel",
  "rollup.js": "rollup",
  rollupjs: "rollup",
  rollup: "rollup",
  "parcel.js": "parcel",
  parceljs: "parcel",
  npm: "npm",
  yarn: "yarn",
  git: "git",
  github: "github",
  gitlab: "gitlab",
  bitbucket: "bitbucket",
  figma: "figma",
  prisma: "prisma",
  redux: "redux",
  flux: "flux",
  redis: "redis",
  selenium: "selenium",
  cypress: "cypress",
  jest: "jest",
  mocha: "mocha",
  chai: "chai",
  karma: "karma",
  vuex: "vuex",
  "nuxt.js": "nuxt",
  nuxtjs: "nuxt",
  nuxt: "nuxt",
  strapi: "strapi",
  wordpress: "wordpress",
  contentful: "contentful",
  netlify: "netlify",
  vercel: "vercel",
  "aws amplify": "amplify",
  // New tech mappings for diverse interviews
  java: "java",
  "spring boot": "spring",
  spring: "spring",
  python: "python",
  "apache spark": "spark",
  spark: "spark",
  kafka: "kafka",
  snowflake: "snowflake",
  tensorflow: "tensorflow",
  pytorch: "pytorch",
  "aws sagemaker": "sagemaker",
  sagemaker: "sagemaker",
  wireshark: "wireshark",
  metasploit: "metasploit",
  swift: "swift",
  kotlin: "kotlin",
  "react native": "reactnative",
  reactnative: "reactnative",
  solidity: "solidity",
  ethereum: "ethereum",
  "web3.js": "web3",
  web3: "web3",
  hardhat: "hardhat",
  c: "c",
  "c++": "cpp",
  cpp: "cpp",
  rtos: "rtos",
  "arm assembly": "arm",
  arm: "arm",
  postman: "postman",
  unity: "unity",
  "unreal engine": "unreal",
  unreal: "unreal",
  opengl: "opengl",
  terraform: "terraform",
  prometheus: "prometheus",
  grafana: "grafana",
  "hugging face": "huggingface",
  huggingface: "huggingface",
  cuda: "cuda",
  django: "django",
  pandas: "pandas",
  "scikit-learn": "scikit",
  scikit: "scikit",
  jupyter: "jupyter",
  agile: "agile",
  scrum: "scrum",
  jira: "jira",
  sketch: "sketch",
  "adobe xd": "xd",
  xd: "xd",
  invision: "invision",
  cisco: "cisco",
  juniper: "juniper",
  springboot: "springboot",
};

export const interviewer: CreateAssistantDTO = {
  name: "Interviewer",
  firstMessage:
    "Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.",
  transcriber: {
    provider: "deepgram",
    model: "nova-2",
    language: "en",
  },
  voice: {
    provider: "11labs",
    voiceId: "sarah",
    stability: 0.4,
    similarityBoost: 0.8,
    speed: 0.9,
    style: 0.5,
    useSpeakerBoost: true,
  },
  model: {
    provider: "openai",
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.

Interview Guidelines:
Follow the structured question flow:
{{questions}}

Engage naturally & react appropriately:
Listen actively to responses and acknowledge them before moving forward.
Ask brief follow-up questions if a response is vague or requires more detail.
Keep the conversation flowing smoothly while maintaining control.
Be professional, yet warm and welcoming:

Use official yet friendly language.
Keep responses concise and to the point (like in a real voice interview).
Avoid robotic phrasing—sound natural and conversational.
Answer the candidate’s questions professionally:

If asked about the role, company, or expectations, provide a clear and relevant answer.
If unsure, redirect the candidate to HR for more details.

Conclude the interview properly:
Thank the candidate for their time.
Inform them that the company will reach out soon with feedback.
End the conversation on a polite and positive note.


- Be sure to be professional and polite.
- Keep all your responses short and simple. Use official language, but be kind and welcoming.
- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,
      },
    ],
  },
};

export const feedbackSchema = z.object({
  totalScore: z.number(),
  categoryScores: z.tuple([
    z.object({
      name: z.literal("Communication Skills"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Technical Knowledge"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Problem Solving"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Cultural Fit"),
      score: z.number(),
      comment: z.string(),
    }),
    z.object({
      name: z.literal("Confidence and Clarity"),
      score: z.number(),
      comment: z.string(),
    }),
  ]),
  strengths: z.array(z.string()),
  areasForImprovement: z.array(z.string()),
  finalAssessment: z.string(),
});

export const interviewCovers = [
  "/adobe.png",
  "/amazon.png",
  "/facebook.png",
  "/hostinger.png",
  "/pinterest.png",
  "/quora.png",
  "/reddit.png",
  "/skype.png",
  "/spotify.png",
  "/telegram.png",
  "/tiktok.png",
  "/yahoo.png",
];

export const dummyInterviews: Interview[] = [
  // Backend & Infrastructure
  {
    id: "backend-1",
    userId: "sample-user",
    role: "Backend Engineer",
    type: "Technical",
    techstack: ["Java", "Spring Boot", "PostgreSQL", "Docker"],
    level: "Mid-Level",
    questions: ["Explain microservices architecture", "How do you handle database transactions?"],
    finalized: true,
    createdAt: "2024-03-15T10:00:00Z",
  },
  {
    id: "devops-1",
    userId: "sample-user",
    role: "DevOps Engineer",
    type: "Technical",
    techstack: ["Kubernetes", "Docker", "AWS", "Terraform"],
    level: "Senior",
    questions: ["Explain CI/CD pipelines", "How do you handle infrastructure scaling?"],
    finalized: true,
    createdAt: "2024-03-14T15:30:00Z",
  },
  {
    id: "data-1",
    userId: "sample-user",
    role: "Data Engineer",
    type: "Technical",
    techstack: ["Python", "Apache Spark", "Kafka", "Snowflake"],
    level: "Mid-Level",
    questions: ["Explain data pipeline design", "How do you handle data quality?"],
    finalized: true,
    createdAt: "2024-03-13T09:15:00Z",
  },
  {
    id: "ml-1",
    userId: "sample-user",
    role: "Machine Learning Engineer",
    type: "Technical",
    techstack: ["Python", "TensorFlow", "PyTorch", "AWS SageMaker"],
    level: "Senior",
    questions: ["Explain model deployment strategies", "How do you handle model drift?"],
    finalized: true,
    createdAt: "2024-03-12T14:20:00Z",
  },
  {
    id: "security-1",
    userId: "sample-user",
    role: "Security Engineer",
    type: "Technical",
    techstack: ["Python", "Wireshark", "Metasploit", "AWS Security"],
    level: "Mid-Level",
    questions: ["Explain OWASP Top 10", "How do you conduct security audits?"],
    finalized: true,
    createdAt: "2024-03-11T11:45:00Z",
  },
  {
    id: "mobile-1",
    userId: "sample-user",
    role: "Mobile Developer",
    type: "Technical",
    techstack: ["Swift", "Kotlin", "React Native", "Firebase"],
    level: "Junior",
    questions: ["Explain mobile app architecture", "How do you handle offline functionality?"],
    finalized: true,
    createdAt: "2024-03-10T16:30:00Z",
  },
  {
    id: "blockchain-1",
    userId: "sample-user",
    role: "Blockchain Developer",
    type: "Technical",
    techstack: ["Solidity", "Ethereum", "Web3.js", "Hardhat"],
    level: "Mid-Level",
    questions: ["Explain smart contract security", "How do you handle gas optimization?"],
    finalized: true,
    createdAt: "2024-03-09T13:15:00Z",
  },
  {
    id: "embedded-1",
    userId: "sample-user",
    role: "Embedded Systems Engineer",
    type: "Technical",
    techstack: ["C", "C++", "RTOS", "ARM Assembly"],
    level: "Senior",
    questions: ["Explain real-time systems", "How do you handle memory constraints?"],
    finalized: true,
    createdAt: "2024-03-08T10:45:00Z",
  },
  {
    id: "qa-1",
    userId: "sample-user",
    role: "QA Automation Engineer",
    type: "Technical",
    techstack: ["Selenium", "Cypress", "Jest", "Postman"],
    level: "Mid-Level",
    questions: ["Explain test automation strategies", "How do you handle test data management?"],
    finalized: true,
    createdAt: "2024-03-07T12:20:00Z",
  },
  {
    id: "game-1",
    userId: "sample-user",
    role: "Game Developer",
    type: "Technical",
    techstack: ["Unity", "C#", "Unreal Engine", "OpenGL"],
    level: "Junior",
    questions: ["Explain game loop architecture", "How do you optimize game performance?"],
    finalized: true,
    createdAt: "2024-03-06T15:10:00Z",
  },
  {
    id: "cloud-1",
    userId: "sample-user",
    role: "Cloud Architect",
    type: "Technical",
    techstack: ["AWS", "Azure", "GCP", "Terraform"],
    level: "Senior",
    questions: ["Explain cloud migration strategies", "How do you design for high availability?"],
    finalized: true,
    createdAt: "2024-03-05T09:30:00Z",
  },
  {
    id: "database-1",
    userId: "sample-user",
    role: "Database Administrator",
    type: "Technical",
    techstack: ["PostgreSQL", "MySQL", "MongoDB", "Redis"],
    level: "Mid-Level",
    questions: ["Explain database optimization", "How do you handle backup and recovery?"],
    finalized: true,
    createdAt: "2024-03-04T14:15:00Z",
  },
  {
    id: "network-1",
    userId: "sample-user",
    role: "Network Engineer",
    type: "Technical",
    techstack: ["Cisco", "Juniper", "Wireshark", "Python"],
    level: "Senior",
    questions: ["Explain network protocols", "How do you handle network security?"],
    finalized: true,
    createdAt: "2024-03-03T11:20:00Z",
  },
  {
    id: "sre-1",
    userId: "sample-user",
    role: "Site Reliability Engineer",
    type: "Technical",
    techstack: ["Kubernetes", "Prometheus", "Grafana", "Python"],
    level: "Senior",
    questions: ["Explain SLO/SLI metrics", "How do you handle incident response?"],
    finalized: true,
    createdAt: "2024-03-02T16:45:00Z",
  },
  {
    id: "ai-1",
    userId: "sample-user",
    role: "AI Research Engineer",
    type: "Technical",
    techstack: ["Python", "PyTorch", "Hugging Face", "CUDA"],
    level: "Senior",
    questions: ["Explain transformer architecture", "How do you handle model interpretability?"],
    finalized: true,
    createdAt: "2024-03-01T13:30:00Z",
  },
  {
    id: "fullstack-1",
    userId: "sample-user",
    role: "Full Stack Developer",
    type: "Technical",
    techstack: ["Node.js", "React", "PostgreSQL", "Docker"],
    level: "Mid-Level",
    questions: ["Explain RESTful API design", "How do you handle state management?"],
    finalized: true,
    createdAt: "2024-02-29T10:15:00Z",
  },
  {
    id: "frontend-1",
    userId: "sample-user",
    role: "Frontend Developer",
    type: "Technical",
    techstack: ["React", "TypeScript", "Next.js", "Tailwind CSS"],
    level: "Junior",
    questions: ["Explain component lifecycle", "How do you handle performance optimization?"],
    finalized: true,
    createdAt: "2024-02-28T14:20:00Z",
  },
  {
    id: "backend-2",
    userId: "sample-user",
    role: "Backend Developer",
    type: "Technical",
    techstack: ["Python", "Django", "PostgreSQL", "Redis"],
    level: "Junior",
    questions: ["Explain ORM concepts", "How do you handle authentication?"],
    finalized: true,
    createdAt: "2024-02-27T09:45:00Z",
  },
  {
    id: "data-science-1",
    userId: "sample-user",
    role: "Data Scientist",
    type: "Technical",
    techstack: ["Python", "Pandas", "Scikit-learn", "Jupyter"],
    level: "Mid-Level",
    questions: ["Explain feature engineering", "How do you handle overfitting?"],
    finalized: true,
    createdAt: "2024-02-26T12:30:00Z",
  },
  {
    id: "product-1",
    userId: "sample-user",
    role: "Product Manager",
    type: "Behavioral",
    techstack: ["Agile", "Scrum", "Jira", "Figma"],
    level: "Mid-Level",
    questions: ["How do you prioritize features?", "Explain your product strategy"],
    finalized: true,
    createdAt: "2024-02-25T15:10:00Z",
  },
  {
    id: "ux-1",
    userId: "sample-user",
    role: "UX Designer",
    type: "Portfolio",
    techstack: ["Figma", "Sketch", "Adobe XD", "InVision"],
    level: "Mid-Level",
    questions: ["Walk through your design process", "How do you handle user feedback?"],
    finalized: true,
    createdAt: "2024-02-24T11:25:00Z",
  }
];
